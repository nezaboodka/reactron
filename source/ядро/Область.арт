// Нижеследующая правовая преамбула должна быть
// включена во все полные и частичные копии этого файла.
// Все права защищены (C) 2019-2022 ООО "Незабудка Софтвер" <contact@nezaboodka.com>
// Лицензия: https://raw.githubusercontent.com/nezaboodka/verstak/master/LICENSE
// Внося изменения в данный файл, вы автоматчиески предоставляете лицензию
// на вносимые вами изменения согласно лицензии, указанной выше.

используется артель

тип Область = интерфейс
{
  x1: Целое
  y1: Целое
  x2: Целое
  y2: Целое
}

операция текст-в-область(текст: Текст, итог: Область): Область
{
  пусть ё = 0
  пусть значение = 0
  пусть знак = 1
  пусть компонент = 0
  пока ё < текст.длина выполнить
  {
    постоянный код-символа = Целое(текст[ё])
    если это-заглавная-буква(код-символа) тогда
    {
      если компонент % 2 == 0 тогда
        значение = значение * 26 + код-символа - 64
      иначе
        ошибка "ожидается цифра, но указана буква ('{ текст[ё] }')"
    }
    иначе если это-строчная-буква(код-символа) тогда
    {
      если компонент % 2 == 0 тогда
        значение = значение * 26 + код-символа - 96
      иначе
        ошибка "ожидается цифра, но указана буква ('{ текст[ё] }')"
    }
    иначе если это-цифра(код-символа) тогда
    {
      если компонент % 2 == 0 тогда
      {
        если значение != 0 тогда
        {
          если компонент == 0 тогда
            результат.x1 = значение * знак
          иначе
            результат.x2 = значение * знак
          значение = 0
        }
        компонент += 1
      }
      значение = значение * 10 + код-символа - 48
    }
    иначе если код-символа == 40 тогда
    {
      если компонент == 0 тогда
        результат.x1 = значение * знак
      иначе если компонент == 2 тогда
        результат.x2 = значение * знак
      если знак > 0 тогда
      {
        знак = -1
        компонент &= ~1
        значение = 0
      }
      else
        ошибка "знак не может быть отрицательным"
    }
    иначе если код-символа == 41 тогда
    {
      если знак > 0 тогда
        ошибка "знак должен быть отрицательным"
      выбор компонент
      либо 0: результат.x1 = значение * знак
      либо 1: результат.y1 = значение * знак
      либо 2: результат.x2 = значение * знак
      либо 3: результат.y2 = значение * знак
      знак = 1
      значение = 0
      компонент += 1
    }
    иначе если код-символа == 58 тогда
    {
      если знак < 0 тогда
        ошибка "area '{ текст }': e1"
      если компонент == 1 тогда
        результат.y1 = значение * знак
      иначе если компонент != 2 тогда
        ошибка "area '${ текст }': [e2] компонент = ${компонент}"
      компонент = 2
      значение = 0
    }
    иначе если это-пробел(код-символа) тогда
    {
      /* nop */
    }
    иначе
      ошибка "Unknown symbol '{ текст[ё] }' in '{ текст }'"
    ё += 1
  }
  если значение != 0 тогда
  {
    выбор компонент
    либо 0:
    {
      результат.x1 = значение * знак
      если знак < 0 и результат.y1 == 0 тогда
        результат.y1 = знак
    }
    либо 1:
    {
      если знак < 0 и результат.x1 == 0 тогда
        результат.x1 = знак
      результат.y1 = значение * знак
    }
    либо 2:
    {
      результат.x2 = значение * знак
      если знак < 0 и результат.y2 == 0 тогда
        результат.y2 = знак
    }
    либо 3:
    {
      если знак < 0 и результат.x2 == 0 тогда
        результат.x2 = знак
      результат.y2 = значение * знак
    }
  }
  иначе если знак < 0 тогда
  {
    если компонент == 0 тогда
    {
      если результат.x1 == 0 тогда
        результат.x1 = знак
      если результат.y1 == 0 тогда
        результат.y1 = знак
    }
    else
    {
      если результат.x2 == 0 тогда
        результат.x2 = знак
      если результат.y2 == 0 тогда
        результат.y2 = знак
    }
  }
}

операция область-в-текст(область: Область): Текст
{
  постоянное а1 = адрес-в-текст(область.x1, область.y1)
  постоянное а2 = адрес-в-текст(область.x2, область.y2)
  результат "{ а1 }{ ? а2 != "" : ":${а2}" | "" }"
}

операция целое-в-буквы(число: Целое): Текст
{
  если число < 0 тогда
    ошибка "целое-в-буквы: число не может быть отрицательным (${ число })"
  результат = ""
  пока число >= 0 выполнить
  {
    постоянное буква = число % 26
    число = целое(число / 26) - 1
    результат = Символ(65 + буква) + результат
  }
}

операция адрес-в-текст(x: Целое, y: Целое): Текст
{
  результат = ""
  если x > 0 и y > 0 тогда
    результат = "${целое-в-буквы(x - 1)}${y}"
  иначе если x > 0 и y < 0 тогда
    результат = "${целое-в-буквы(x - 1)}(${-y})"
  иначе если x < 0 и y > 0 тогда
    результат = "(${целое-в-буквы(-x - 1)})${y}"
  иначе если x < 0 и y < 0 тогда
    результат = "(${целое-в-буквы(-x - 1)}${-y})"
  иначе
    результат = ""
}

операция ячейки-совпадают(а: Область, б: Область): Булево
{
  результат =
    а.x1 == б.x1 и
    а.y1 == б.y1 и
    а.x2 == б.x2 и
    а.y1 == б.y2
}

скрытая
операция это-пробел(символ: Целое): Булево
{
  // пока что поддерживаются только латинские буквы
  return символ == 32
    или (символ >= 9 и символ <= 13)
    или символ == 133 или символ == 160
}

скрытая
операция это-цифра(символ: Целое, индекс: Целое? = пусто): Булево {
  return 48 <= символ и символ <= 57
}

скрытая
операция это-заглавная-буква(символ: Целое): Булево {
  return 65 <= символ и символ <= 90
}

скрытая
операция это-строчная-буква(символ: Целое): Булево {
  return 97 <= символ и символ <= 122
}
