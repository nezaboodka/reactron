// The below copyright notice and the license permission notice
// shall be included in all copies or substantial portions.
// Copyright (C) 2019-2022 Nezaboodka Software <contact@nezaboodka.com>
// License: https://raw.githubusercontent.com/nezaboodka/verstak/master/LICENSE
// By contributing, you agree that your contributions will be
// automatically licensed under the license referred above.

// import { CollectionReader, Item, MemberOptions } from "reactronic"

использовать артель

тип Callback<T = Значение> =
  операции(native: T) // to be deleted

тип Делегат<T = Значение, M = Значение, C = Значение, R = Ничего> =
  операции(блок: Блок<T, M, C, R>, оригинал: операции(): R): R

тип ПростойДелегат<T = Значение> =
  операции(блок: Блок<T, Значение, Значение, Значение>)

тип КонструкторБлока<Т = Значение, M = Значение, C = Значение, R = Ничего> = объект
{
  оригинал: КонструкторБлока<Т, M, C, R>?
  код: Текст?
  режим: Режим?
  триггеры: Значение?
  заявить: Делегат<Т, M, C, R>?
  создать: Делегат<Т, M, C, R>?
  подготовить: Делегат<Т, M, C, R>?
  показать: Делегат<Т, M, C, R>?
  завершить: Делегат<Т, M, C, R>?
}

// VBlock

тип ДескрипторБлока<T = Значение, M = Значение, C = Значение, R = Ничего> = интерфейс
{
  охраняемо код: Текст
  охраняемо драйвер: Драйвер<T, Значение>
  // охраняемо конструктор: Readonly<КонструкторБлока<T, M, C, R>>
  охраняемо конструктор: КонструкторБлока<T, M, C, R>
  охраняемо уровень: Целое
  охраняемо владелец: Блок<Значение, Значение, Значение, Ничего>
  охраняемо родитель: Блок<Значение, Значение, Значение, Ничего>
  охраняемо дети: CollectionReader<Блок<Значение, Значение, Значение, Ничего>>
  охраняемо экземпляр: Item<Блок<Значение, Значение, Значение, Ничего>>?
  охраняемо штамп: Целое
  охраняемо outer: Блок<Значение, Значение, Значение, Ничего>
  охраняемо контекст: VBlockCtx<Значение>?
}

тип Блок<T = Значение, M = Значение, C = Значение, R = Ничего> = интерфейс
{
  // System-managed properties
  охраняемо дескриптор: ДескрипторБлока<T, M, C, R>
  охраняемо реализация: T
  охраняемо это-лента: Булево
  охраняемо это-таблица: Булево

  // User-defined properties
  модель: M
  контролер: C
  раскладка-детей: Раскладка
  область: ОбластьБлока
  доля-роста-ширины: Число
  минимальная-ширина: Текст
  максимальная-ширина: Текст
  доля-роста-высоты: Число
  минимальная-высота: Текст
  максимальная-высота: Текст
  выравнивание-содержимого: Выравнивание
  выравнивание-блока: Выравнивание
  перенос-содержимого: Булево
  overlayVisible: Булево?
  перестановка-детей: Булево
  приоритет-показа: Приоритет?
  это-последовательность: Булево
  охраняемо это-первоначальный-показ: Булево
  операции стиль(styleName: Текст, enabled: Булево? = пусто)
  операции настроить-реактроник(options: Partial<MemberOptions>): MemberOptions
}

тип VBlockCtx<T: Объект = Объект> = интерфейс
{
  value: T
}

// Драйвер

тип Драйвер<T, C = Значение> = интерфейс
{
  постоянно имя: Текст
  постоянно это-строка: Булево
  постоянно преднастройка: ПростойДелегат<T>?

  операции заявить(блок: Блок<T, Значение, C, Ничего>)
  операции создать(блок: Блок<T, Значение, C, Ничего>, b: объект { native: T?; controller: C? })
  операции подготовить(блок: Блок<T, Значение, C, Ничего>)
  операции встроить(блок: Блок<T, Значение, C, Ничего>)
  операции показать(блок: Блок<T, Значение, C, Ничего>)
  операции завершить(блок: Блок<T, Значение, C, Ничего>, isLeader: Булево): Булево

  операции применить-раскладку-детей(block: Блок<T, Значение, C, Значение>, value: Раскладка)
  операции применить-рамку(block: Блок<T, Значение, C, Значение>, value: Рамка?)
  операции применить-долю-роста-ширины(block: Блок<T, Значение, C, Значение>, value: Число)
  операции применить-минимальную-ширину(block: Блок<T, Значение, C, Значение>, value: Текст)
  операции применить-максимальную-ширину(block: Блок<T, Значение, C, Значение>, value: Текст)
  операции применить-долю-роста-высоты(block: Блок<T, Значение, C, Значение>, value: Число)
  операции применить-минимальную-высоту(block: Блок<T, Значение, C, Значение>, value: Текст)
  операции применить-максимальную-высоту(block: Блок<T, Значение, C, Значение>, value: Текст)
  операции применить-выравнивание-содержимого(block: Блок<T, Значение, C, Значение>, value: Выравнивание)
  операции применить-выравнивание-блока(block: Блок<T, Значение, C, Значение>, value: Выравнивание)
  операции применить-перенос-содержимого(block: Блок<T, Значение, C, Значение>, value: Булево)
  операции apply-overlay-visible(block: Блок<T, Значение, C, Значение>, value: Булево?)
  операции применить-стиль(block: Блок<T, Значение, C, Значение>, secondary: Булево, styleName: Текст, enabled: Булево?)
}

тип Рамка = интерфейс
{
  x1: Целое
  y1: Целое
  x2: Целое
  y2: Целое
}

тип Раскладка = вариант
{
  лента = 0
  таблица = 1
  заметка = 2
  группа = 3
  строка = 4
  курсор = 5
}

тип Приоритет = вариант
{
  высокий = 0
  обычный = 1
  низкий = 2
}

тип Режим = вариант
{
  обычный = 0
  раздельная-реакция = 1
  ручное-встраивание = 2
}

тип Выравнивание = вариант
{
  растяжение       = 0b00000
  по-левому-краю   = 0b00001
  по-центру-ширины = 0b00010
  по-правому-краю  = 0b00011
  по-верхнему-краю = 0b00100
  по-центру-высоты = 0b01000
  по-нижнему-краю  = 0b01100
  стандартно       = 0b10000
  по-центру        = по-центру-ширины + по-центру-высоты
}

тип ЭластичныйРазмер = интерфейс
{
  ячеек: Целое?           // 1 (table only)
  минимум: Текст?         // min-content
  максимум: Текст?        // min-content
  доля-роста: Число?      // 0
}

тип РазмерПолосы = интерфейс на основе ЭластичныйРазмер {
  полоса: Текст?          // <current>
  номер-полосы: Число?
}

тип ОбластьБлока = интерфейс // = undefined | string | { ... }
{
  область: Текст
  ячеек-в-ширину: Целое?  // 1 (table only)
  ячеек-в-высоту: Целое?  // 1 (table only)
}
